TESTO_THIRDPARTY_OPTION(testolib USE_GTEST   "use GTest library"     ON)
TESTO_THIRDPARTY_OPTION(testolib USE_GTEST_SYSTEM  "use GTest library"     OFF)
set(GTEST_FIND_PACKAGE_NAME "GTest")
list(APPEND THIRD_PARTY_MODULES "GTEST")
TESTO_THIRDPARTY_OPTION(testolib USE_OPENCV   "use OpenCv library"     ON)
TESTO_THIRDPARTY_OPTION(testolib USE_OPENCV_SYSTEM  "use OpenCv library"     OFF)
set(OPENCV_FIND_PACKAGE_NAME "OpenCv")
list(APPEND THIRD_PARTY_MODULES "OPENCV")
TESTO_THIRDPARTY_OPTION(testolib USE_TILIB   "use TiLib library"     ON)
TESTO_THIRDPARTY_OPTION(testolib USE_TILIB_SYSTEM  "use TiLib library"     OFF)
set(TILIB_FIND_PACKAGE_NAME "TiLib")
list(APPEND THIRD_PARTY_MODULES "TILIB")


if(UNIX OR APPLE)
  TESTO_THIRDPARTY_OPTION(testolib USE_PTHREADS "use pThread library" ON)
  if(USE_PTHREADS)
    list(APPEND THIRD_PARTY_LIBRARIES pthread)
  endif()
endif()

if(APPLE OR UNIX)
  TESTO_THIRDPARTY_OPTION(testolib USE_F2C "use F2C library" OFF)
  if(USE_F2C)
    find_package(F2c REQUIRED)
    INCLUDE_DIRECTORIES(${F2C_INCLUDE_DIR})
    
    if(NOT APPLE)
      set(CMAKE_EXE_LINKER_FLAGS "-u MAIN__ ${CMAKE_EXE_LINKER_FLAGS}")
    endif()  

    list(APPEND THIRD_PARTY_LIBRARIES ${F2C_LIBRARY})
  endif()

  TESTO_THIRDPARTY_OPTION(testolib USE_LAPACK "use LAPACK library" OFF)
  if(USE_LAPACK)
    find_package(LAPACK REQUIRED)

    if(LAPACK_INCLUDE_DIR)
      include_directories("${LAPACK_INCLUDE_DIR}")
    endif()
    if(LAPACK_LIBRARIES_DIR)
      link_directories("${LAPACK_LIBRARIES_DIR}")
    endif()
    list(APPEND THIRD_PARTY_LIBRARIES ${LAPACK_LIBRARIES})
  endif()

  TESTO_THIRDPARTY_OPTION(testolib USE_ARPACK "use ARPACK library" OFF)
  if(USE_ARPACK)
    find_package(ARPACK REQUIRED)

    if(ARPACK_INCLUDE_DIR)
      include_directories("${ARPACK_INCLUDE_DIR}")
    endif()
    if(ARPACK_LIBRARIES_DIR)
      link_directories("${ARPACK_LIBRARIES_DIR}")
    endif()
    list(APPEND THIRD_PARTY_LIBRARIES ${ARPACK_LIBRARIES})
  endif()

  TESTO_THIRDPARTY_OPTION(testolib USE_ARPACKPP "use ARPACKPP library" OFF)
  if(USE_ARPACKPP)
    find_package(ARPACKPP REQUIRED)

    if(ARPACKPP_INCLUDE_DIR)
      include_directories("${ARPACKPP_INCLUDE_DIR}")
    endif()
    if(ARPACKPP_LIBRARIES_DIR)
      link_directories("${ARPACKPP_LIBRARIES_DIR}")
    endif()
    list(APPEND THIRD_PARTY_LIBRARIES ${ARPACKPP_LIBRARIES})
  endif()

  TESTO_THIRDPARTY_OPTION(testolib USE_SUPERLU "use SUPERLU library" OFF)
  if(USE_SUPERLU)
    find_package(SuperLU REQUIRED)

    if(SUPERLU_INCLUDE_DIR)
      include_directories("${SUPERLU_INCLUDE_DIR}")
    endif()
    if(ARPACK_LIBRARIES_DIR)
      link_directories("${SUPERLU_LIBRARIES_DIR}")
    endif()
    list(APPEND THIRD_PARTY_LIBRARIES ${SUPERLU_LIBRARIES})
  endif()

endif()


message(STATUS +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++)
message(STATUS "|   LIBRARY SEARCH DIRS:")
foreach( module ${THIRD_PARTY_MODULES} )
  string(TOLOWER ${module} LMODULE)
  string(TOUPPER ${module} UMODULE)
  set( "${UMODULE}_LIBRARY_SEARCH_DIRS" "${CMAKE_CURRENT_LIST_DIR}/${LMODULE}" )
  message(STATUS "|   ${UMODULE}_LIBRARY_SEARCH_DIRS: \t ${${UMODULE}_LIBRARY_SEARCH_DIRS}")
endforeach()
message(STATUS +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++)
